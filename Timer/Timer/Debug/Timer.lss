
Timer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002a4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000014  00800060  000002a4  00000338  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000005  00800074  00800074  0000034c  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  0000034c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000097  00000000  00000000  00000a18  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  00000aaf  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000060  00000000  00000000  00000ade  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000043f  00000000  00000000  00000b3e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000228  00000000  00000000  00000f7d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000001e7  00000000  00000000  000011a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000000b0  00000000  00000000  0000138c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000256  00000000  00000000  0000143c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000017c  00000000  00000000  00001692  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000040  00000000  00000000  0000180e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__vector_7>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 ea       	ldi	r30, 0xA4	; 164
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a4 37       	cpi	r26, 0x74	; 116
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a4 e7       	ldi	r26, 0x74	; 116
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a9 37       	cpi	r26, 0x79	; 121
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 46 01 	call	0x28c	; 0x28c <main>
  8a:	0c 94 50 01 	jmp	0x2a0	; 0x2a0 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__vector_7>:
static uint_8 limit = 0  ;
volatile static uint_8 clock_counter = 0 ;
volatile static uint_8 min = 0 , sec1 = 0  ;
volatile static uint_8 flag_if_stop = 0 ;
ISR ( TIMER1_COMPA_vect)
{
  92:	1f 92       	push	r1
  94:	0f 92       	push	r0
  96:	0f b6       	in	r0, 0x3f	; 63
  98:	0f 92       	push	r0
  9a:	11 24       	eor	r1, r1
  9c:	8f 93       	push	r24
	clock_counter++;
  9e:	80 91 77 00 	lds	r24, 0x0077
  a2:	8f 5f       	subi	r24, 0xFF	; 255
  a4:	80 93 77 00 	sts	0x0077, r24
}
  a8:	8f 91       	pop	r24
  aa:	0f 90       	pop	r0
  ac:	0f be       	out	0x3f, r0	; 63
  ae:	0f 90       	pop	r0
  b0:	1f 90       	pop	r1
  b2:	18 95       	reti

000000b4 <init_ports>:

static tstr_part_base ga_port_base_buffer[0] ;
tenum_errors_type init_ports  ( tenum_port_base_t port_typemin , tenum_port_base_t port_typesec1 , tenum_port_base_t port_typesec2 )
{
	tenum_errors_type ret_val = NO_ERRORS;
	if( (port_typemin < PORT_MAX && port_typemin > PORT_MIN ) && (port_typesec1 < PORT_MAX && port_typesec1 >PORT_MIN ) && (port_typesec2 < PORT_MAX && port_typesec2 >PORT_MIN ) )
  b4:	98 2f       	mov	r25, r24
  b6:	9a 52       	subi	r25, 0x2A	; 42
  b8:	90 31       	cpi	r25, 0x10	; 16
  ba:	08 f5       	brcc	.+66     	; 0xfe <init_ports+0x4a>
  bc:	96 2f       	mov	r25, r22
  be:	9a 52       	subi	r25, 0x2A	; 42
  c0:	90 31       	cpi	r25, 0x10	; 16
  c2:	f8 f4       	brcc	.+62     	; 0x102 <init_ports+0x4e>
  c4:	94 2f       	mov	r25, r20
  c6:	9a 52       	subi	r25, 0x2A	; 42
  c8:	90 31       	cpi	r25, 0x10	; 16
  ca:	e8 f4       	brcc	.+58     	; 0x106 <init_ports+0x52>
	{
		if( limit == 0 )
  cc:	90 91 78 00 	lds	r25, 0x0078
  d0:	91 11       	cpse	r25, r1
  d2:	1b c0       	rjmp	.+54     	; 0x10a <init_ports+0x56>
		{
			
			*((volatile uint_8 *) port_typemin  + 1) = 0XFF ;
  d4:	e8 2f       	mov	r30, r24
  d6:	f0 e0       	ldi	r31, 0x00	; 0
  d8:	9f ef       	ldi	r25, 0xFF	; 255
  da:	91 83       	std	Z+1, r25	; 0x01
			*((volatile uint_8 *) port_typesec1 + 1) = 0XFF ;
  dc:	e6 2f       	mov	r30, r22
  de:	f0 e0       	ldi	r31, 0x00	; 0
  e0:	91 83       	std	Z+1, r25	; 0x01
			*((volatile uint_8 *) port_typesec2 + 1) = 0XFF ;
  e2:	e4 2f       	mov	r30, r20
  e4:	f0 e0       	ldi	r31, 0x00	; 0
  e6:	91 83       	std	Z+1, r25	; 0x01
			ga_port_base_buffer[0].port_Base_sec2 = port_typesec2 ;
  e8:	40 93 7b 00 	sts	0x007B, r20
			ga_port_base_buffer[0].port_Base_sec1 = port_typesec1 ;
  ec:	60 93 7a 00 	sts	0x007A, r22
			ga_port_base_buffer[0].port_Base_min  = port_typemin ;
  f0:	80 93 79 00 	sts	0x0079, r24
			limit = 1 ;
  f4:	81 e0       	ldi	r24, 0x01	; 1
  f6:	80 93 78 00 	sts	0x0078, r24
}tstr_part_base;

static tstr_part_base ga_port_base_buffer[0] ;
tenum_errors_type init_ports  ( tenum_port_base_t port_typemin , tenum_port_base_t port_typesec1 , tenum_port_base_t port_typesec2 )
{
	tenum_errors_type ret_val = NO_ERRORS;
  fa:	82 e0       	ldi	r24, 0x02	; 2
  fc:	08 95       	ret
		}

	}
	else
	{
		ret_val = INVALID_PARAMTER;
  fe:	83 e0       	ldi	r24, 0x03	; 3
 100:	08 95       	ret
 102:	83 e0       	ldi	r24, 0x03	; 3
 104:	08 95       	ret
 106:	83 e0       	ldi	r24, 0x03	; 3
 108:	08 95       	ret
			ga_port_base_buffer[0].port_Base_min  = port_typemin ;
			limit = 1 ;
		}
		else
		{
			ret_val = JUST_THREE_PORTS;
 10a:	84 e0       	ldi	r24, 0x04	; 4
	}



	return ret_val ;
}
 10c:	08 95       	ret

0000010e <start_clock>:
tenum_errors_type start_clock ()
{
 10e:	cf 93       	push	r28
 110:	df 93       	push	r29
	tenum_errors_type ret_val = NO_ERRORS;
	if(limit == 1 )
 112:	80 91 78 00 	lds	r24, 0x0078
 116:	81 30       	cpi	r24, 0x01	; 1
 118:	09 f0       	breq	.+2      	; 0x11c <start_clock+0xe>
 11a:	8b c0       	rjmp	.+278    	; 0x232 <start_clock+0x124>
	{
		
		//TCCR1A = 0X8D   ;
		TCCR1B = 0X0D ;
 11c:	8d e0       	ldi	r24, 0x0D	; 13
 11e:	8e bd       	out	0x2e, r24	; 46
		OCR1A  = 0X3E8  ;
 120:	88 ee       	ldi	r24, 0xE8	; 232
 122:	93 e0       	ldi	r25, 0x03	; 3
 124:	9b bd       	out	0x2b, r25	; 43
 126:	8a bd       	out	0x2a, r24	; 42
		TIMSK |= (1<<4);
 128:	89 b7       	in	r24, 0x39	; 57
 12a:	80 61       	ori	r24, 0x10	; 16
 12c:	89 bf       	out	0x39, r24	; 57
		//TIMSK |= (1<<2);
		sei();
 12e:	78 94       	sei
		
		PORTC = pattarn_seven_seg_num[min] ;
 130:	e0 91 76 00 	lds	r30, 0x0076
 134:	f0 e0       	ldi	r31, 0x00	; 0
 136:	ee 0f       	add	r30, r30
 138:	ff 1f       	adc	r31, r31
 13a:	e0 5a       	subi	r30, 0xA0	; 160
 13c:	ff 4f       	sbci	r31, 0xFF	; 255
 13e:	80 81       	ld	r24, Z
 140:	85 bb       	out	0x15, r24	; 21
		PORTD = pattarn_seven_seg_num[sec1] ;
 142:	e0 91 75 00 	lds	r30, 0x0075
 146:	f0 e0       	ldi	r31, 0x00	; 0
 148:	ee 0f       	add	r30, r30
 14a:	ff 1f       	adc	r31, r31
 14c:	e0 5a       	subi	r30, 0xA0	; 160
 14e:	ff 4f       	sbci	r31, 0xFF	; 255
 150:	80 81       	ld	r24, Z
 152:	82 bb       	out	0x12, r24	; 18
		PORTB = pattarn_seven_seg_num[clock_counter] ;
 154:	e0 91 77 00 	lds	r30, 0x0077
 158:	f0 e0       	ldi	r31, 0x00	; 0
 15a:	ee 0f       	add	r30, r30
 15c:	ff 1f       	adc	r31, r31
 15e:	e0 5a       	subi	r30, 0xA0	; 160
 160:	ff 4f       	sbci	r31, 0xFF	; 255
 162:	80 81       	ld	r24, Z
 164:	88 bb       	out	0x18, r24	; 24
		while( flag_if_stop  == 0 )
		{
			if( (TIFR &(1<<4)) == 0)
			{
				
				*(( volatile uint_8 *)ga_port_base_buffer[0].port_Base_sec2 +2) = pattarn_seven_seg_num[clock_counter] ;
 166:	cb e7       	ldi	r28, 0x7B	; 123
 168:	d0 e0       	ldi	r29, 0x00	; 0
					if (min > 9)
					{
						min = 0 ;
					}
					sec1 = 0 ;
					*(( volatile uint_8 *)ga_port_base_buffer[0].port_Base_sec1 +2 ) = pattarn_seven_seg_num[sec1] ;
 16a:	8a e7       	ldi	r24, 0x7A	; 122
 16c:	90 e0       	ldi	r25, 0x00	; 0
					clock_counter = 0 ;
					*(( volatile uint_8 *)ga_port_base_buffer[0].port_Base_min +2 ) = pattarn_seven_seg_num[min] ;
 16e:	29 e7       	ldi	r18, 0x79	; 121
 170:	30 e0       	ldi	r19, 0x00	; 0
		PORTC = pattarn_seven_seg_num[min] ;
		PORTD = pattarn_seven_seg_num[sec1] ;
		PORTB = pattarn_seven_seg_num[clock_counter] ;
		
		
		while( flag_if_stop  == 0 )
 172:	58 c0       	rjmp	.+176    	; 0x224 <start_clock+0x116>
		{
			if( (TIFR &(1<<4)) == 0)
 174:	08 b6       	in	r0, 0x38	; 56
 176:	04 fc       	sbrc	r0, 4
 178:	55 c0       	rjmp	.+170    	; 0x224 <start_clock+0x116>
			{
				
				*(( volatile uint_8 *)ga_port_base_buffer[0].port_Base_sec2 +2) = pattarn_seven_seg_num[clock_counter] ;
 17a:	e8 81       	ld	r30, Y
 17c:	f0 e0       	ldi	r31, 0x00	; 0
 17e:	a0 91 77 00 	lds	r26, 0x0077
 182:	b0 e0       	ldi	r27, 0x00	; 0
 184:	aa 0f       	add	r26, r26
 186:	bb 1f       	adc	r27, r27
 188:	a0 5a       	subi	r26, 0xA0	; 160
 18a:	bf 4f       	sbci	r27, 0xFF	; 255
 18c:	4c 91       	ld	r20, X
 18e:	42 83       	std	Z+2, r20	; 0x02
				if ( clock_counter > 9 )
 190:	40 91 77 00 	lds	r20, 0x0077
 194:	4a 30       	cpi	r20, 0x0A	; 10
 196:	98 f0       	brcs	.+38     	; 0x1be <start_clock+0xb0>
				{
					
					sec1++;
 198:	40 91 75 00 	lds	r20, 0x0075
 19c:	4f 5f       	subi	r20, 0xFF	; 255
 19e:	40 93 75 00 	sts	0x0075, r20
					*(( volatile uint_8 *)ga_port_base_buffer[0].port_Base_sec1 +2 ) = pattarn_seven_seg_num[sec1] ;
 1a2:	dc 01       	movw	r26, r24
 1a4:	ec 91       	ld	r30, X
 1a6:	f0 e0       	ldi	r31, 0x00	; 0
 1a8:	a0 91 75 00 	lds	r26, 0x0075
 1ac:	b0 e0       	ldi	r27, 0x00	; 0
 1ae:	aa 0f       	add	r26, r26
 1b0:	bb 1f       	adc	r27, r27
 1b2:	a0 5a       	subi	r26, 0xA0	; 160
 1b4:	bf 4f       	sbci	r27, 0xFF	; 255
 1b6:	4c 91       	ld	r20, X
 1b8:	42 83       	std	Z+2, r20	; 0x02
					clock_counter = 0 ;
 1ba:	10 92 77 00 	sts	0x0077, r1
				}
				if ( sec1 == 6 && clock_counter > 0)
 1be:	40 91 75 00 	lds	r20, 0x0075
 1c2:	46 30       	cpi	r20, 0x06	; 6
 1c4:	59 f5       	brne	.+86     	; 0x21c <start_clock+0x10e>
 1c6:	40 91 77 00 	lds	r20, 0x0077
 1ca:	44 23       	and	r20, r20
 1cc:	39 f1       	breq	.+78     	; 0x21c <start_clock+0x10e>
				{
					min++ ;
 1ce:	40 91 76 00 	lds	r20, 0x0076
 1d2:	4f 5f       	subi	r20, 0xFF	; 255
 1d4:	40 93 76 00 	sts	0x0076, r20
					if (min > 9)
 1d8:	40 91 76 00 	lds	r20, 0x0076
 1dc:	4a 30       	cpi	r20, 0x0A	; 10
 1de:	10 f0       	brcs	.+4      	; 0x1e4 <start_clock+0xd6>
					{
						min = 0 ;
 1e0:	10 92 76 00 	sts	0x0076, r1
					}
					sec1 = 0 ;
 1e4:	10 92 75 00 	sts	0x0075, r1
					*(( volatile uint_8 *)ga_port_base_buffer[0].port_Base_sec1 +2 ) = pattarn_seven_seg_num[sec1] ;
 1e8:	dc 01       	movw	r26, r24
 1ea:	ec 91       	ld	r30, X
 1ec:	f0 e0       	ldi	r31, 0x00	; 0
 1ee:	a0 91 75 00 	lds	r26, 0x0075
 1f2:	b0 e0       	ldi	r27, 0x00	; 0
 1f4:	aa 0f       	add	r26, r26
 1f6:	bb 1f       	adc	r27, r27
 1f8:	a0 5a       	subi	r26, 0xA0	; 160
 1fa:	bf 4f       	sbci	r27, 0xFF	; 255
 1fc:	4c 91       	ld	r20, X
 1fe:	42 83       	std	Z+2, r20	; 0x02
					clock_counter = 0 ;
 200:	10 92 77 00 	sts	0x0077, r1
					*(( volatile uint_8 *)ga_port_base_buffer[0].port_Base_min +2 ) = pattarn_seven_seg_num[min] ;
 204:	d9 01       	movw	r26, r18
 206:	ec 91       	ld	r30, X
 208:	f0 e0       	ldi	r31, 0x00	; 0
 20a:	a0 91 76 00 	lds	r26, 0x0076
 20e:	b0 e0       	ldi	r27, 0x00	; 0
 210:	aa 0f       	add	r26, r26
 212:	bb 1f       	adc	r27, r27
 214:	a0 5a       	subi	r26, 0xA0	; 160
 216:	bf 4f       	sbci	r27, 0xFF	; 255
 218:	4c 91       	ld	r20, X
 21a:	42 83       	std	Z+2, r20	; 0x02
				}
				if ( flag_if_stop == 1)
 21c:	40 91 74 00 	lds	r20, 0x0074
 220:	41 30       	cpi	r20, 0x01	; 1
 222:	49 f0       	breq	.+18     	; 0x236 <start_clock+0x128>
		PORTC = pattarn_seven_seg_num[min] ;
		PORTD = pattarn_seven_seg_num[sec1] ;
		PORTB = pattarn_seven_seg_num[clock_counter] ;
		
		
		while( flag_if_stop  == 0 )
 224:	40 91 74 00 	lds	r20, 0x0074
 228:	44 23       	and	r20, r20
 22a:	09 f4       	brne	.+2      	; 0x22e <start_clock+0x120>
 22c:	a3 cf       	rjmp	.-186    	; 0x174 <start_clock+0x66>

	return ret_val ;
}
tenum_errors_type start_clock ()
{
	tenum_errors_type ret_val = NO_ERRORS;
 22e:	82 e0       	ldi	r24, 0x02	; 2
 230:	03 c0       	rjmp	.+6      	; 0x238 <start_clock+0x12a>
		}
	}
	
	else
	{
		ret_val = INVALID_PARAMTER;
 232:	83 e0       	ldi	r24, 0x03	; 3
 234:	01 c0       	rjmp	.+2      	; 0x238 <start_clock+0x12a>

	return ret_val ;
}
tenum_errors_type start_clock ()
{
	tenum_errors_type ret_val = NO_ERRORS;
 236:	82 e0       	ldi	r24, 0x02	; 2
	}



	return ret_val ;
}
 238:	df 91       	pop	r29
 23a:	cf 91       	pop	r28
 23c:	08 95       	ret

0000023e <stop_clock>:

tenum_errors_type stop_clock  ()
{
	tenum_errors_type ret_val = NO_ERRORS ;
	
	if ( flag_if_stop == 0 )
 23e:	80 91 74 00 	lds	r24, 0x0074
 242:	81 11       	cpse	r24, r1
 244:	21 c0       	rjmp	.+66     	; 0x288 <stop_clock+0x4a>
	{
		flag_if_stop = 1 ;
 246:	81 e0       	ldi	r24, 0x01	; 1
 248:	80 93 74 00 	sts	0x0074, r24
		TIMSK &= ~(1<<4);
 24c:	89 b7       	in	r24, 0x39	; 57
 24e:	8f 7e       	andi	r24, 0xEF	; 239
 250:	89 bf       	out	0x39, r24	; 57
		PORTB = pattarn_seven_seg_num[clock_counter] ;
 252:	e0 91 77 00 	lds	r30, 0x0077
 256:	f0 e0       	ldi	r31, 0x00	; 0
 258:	ee 0f       	add	r30, r30
 25a:	ff 1f       	adc	r31, r31
 25c:	e0 5a       	subi	r30, 0xA0	; 160
 25e:	ff 4f       	sbci	r31, 0xFF	; 255
 260:	80 81       	ld	r24, Z
 262:	88 bb       	out	0x18, r24	; 24
		PORTD = pattarn_seven_seg_num[sec1] ;
 264:	e0 91 75 00 	lds	r30, 0x0075
 268:	f0 e0       	ldi	r31, 0x00	; 0
 26a:	ee 0f       	add	r30, r30
 26c:	ff 1f       	adc	r31, r31
 26e:	e0 5a       	subi	r30, 0xA0	; 160
 270:	ff 4f       	sbci	r31, 0xFF	; 255
 272:	80 81       	ld	r24, Z
 274:	82 bb       	out	0x12, r24	; 18
		PORTC = pattarn_seven_seg_num[min] ;
 276:	e0 91 76 00 	lds	r30, 0x0076
 27a:	f0 e0       	ldi	r31, 0x00	; 0
 27c:	ee 0f       	add	r30, r30
 27e:	ff 1f       	adc	r31, r31
 280:	e0 5a       	subi	r30, 0xA0	; 160
 282:	ff 4f       	sbci	r31, 0xFF	; 255
 284:	80 81       	ld	r24, Z
 286:	85 bb       	out	0x15, r24	; 21
		
	}
	
	
	return ret_val ;
}
 288:	82 e0       	ldi	r24, 0x02	; 2
 28a:	08 95       	ret

0000028c <main>:


int main(void)
{
	
	init_ports  (PORT_C , PORT_D , PORT_B) ;
 28c:	46 e3       	ldi	r20, 0x36	; 54
 28e:	60 e3       	ldi	r22, 0x30	; 48
 290:	83 e3       	ldi	r24, 0x33	; 51
 292:	0e 94 5a 00 	call	0xb4	; 0xb4 <init_ports>
	//deinit_ports() ;
	start_clock ( );
 296:	0e 94 87 00 	call	0x10e	; 0x10e <start_clock>
	stop_clock  ( );
 29a:	0e 94 1f 01 	call	0x23e	; 0x23e <stop_clock>
 29e:	ff cf       	rjmp	.-2      	; 0x29e <main+0x12>

000002a0 <_exit>:
 2a0:	f8 94       	cli

000002a2 <__stop_program>:
 2a2:	ff cf       	rjmp	.-2      	; 0x2a2 <__stop_program>
