
simple_clock.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002b6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000014  00800060  000002b6  0000034a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000005  00800074  00800074  0000035e  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  00000360  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000097  00000000  00000000  00000a2c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  00000ac3  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000060  00000000  00000000  00000af2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000004e6  00000000  00000000  00000b52  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000002a0  00000000  00000000  00001038  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000032d  00000000  00000000  000012d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000000b0  00000000  00000000  00001608  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002b6  00000000  00000000  000016b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000017c  00000000  00000000  0000196e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000040  00000000  00000000  00001aea  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__vector_7>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 eb       	ldi	r30, 0xB6	; 182
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a4 37       	cpi	r26, 0x74	; 116
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a4 e7       	ldi	r26, 0x74	; 116
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a9 37       	cpi	r26, 0x79	; 121
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 59 01 	jmp	0x2b2	; 0x2b2 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:


int main(void)
{ 
	
	 init_ports  (PORT_C , PORT_D , PORT_B) ;
  92:	46 e3       	ldi	r20, 0x36	; 54
  94:	60 e3       	ldi	r22, 0x30	; 48
  96:	83 e3       	ldi	r24, 0x33	; 51
  98:	0e 94 6d 00 	call	0xda	; 0xda <init_ports>
	 //deinit_ports() ;
	 start_clock ( );
  9c:	0e 94 9a 00 	call	0x134	; 0x134 <start_clock>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a0:	2f e9       	ldi	r18, 0x9F	; 159
  a2:	86 e8       	ldi	r24, 0x86	; 134
  a4:	91 e0       	ldi	r25, 0x01	; 1
  a6:	21 50       	subi	r18, 0x01	; 1
  a8:	80 40       	sbci	r24, 0x00	; 0
  aa:	90 40       	sbci	r25, 0x00	; 0
  ac:	e1 f7       	brne	.-8      	; 0xa6 <main+0x14>
  ae:	00 c0       	rjmp	.+0      	; 0xb0 <main+0x1e>
  b0:	00 00       	nop
	 _delay_ms   (500);
	 stop_clock  ( );
  b2:	0e 94 32 01 	call	0x264	; 0x264 <stop_clock>
  b6:	ff cf       	rjmp	.-2      	; 0xb6 <main+0x24>

000000b8 <__vector_7>:
static uint_8 limit = 0  ;
volatile static uint_8 clock_counter = 0 ;
volatile static uint_8 min = 0 , sec1 = 0  ;
volatile static uint_8 flag_if_stop = 0 ;
ISR ( TIMER1_COMPA_vect)
{  
  b8:	1f 92       	push	r1
  ba:	0f 92       	push	r0
  bc:	0f b6       	in	r0, 0x3f	; 63
  be:	0f 92       	push	r0
  c0:	11 24       	eor	r1, r1
  c2:	8f 93       	push	r24
	 clock_counter++;
  c4:	80 91 77 00 	lds	r24, 0x0077
  c8:	8f 5f       	subi	r24, 0xFF	; 255
  ca:	80 93 77 00 	sts	0x0077, r24
}
  ce:	8f 91       	pop	r24
  d0:	0f 90       	pop	r0
  d2:	0f be       	out	0x3f, r0	; 63
  d4:	0f 90       	pop	r0
  d6:	1f 90       	pop	r1
  d8:	18 95       	reti

000000da <init_ports>:

static tstr_part_base ga_port_base_buffer[0] ;  
tenum_errors_type init_ports  ( tenum_port_base_t port_typemin , tenum_port_base_t port_typesec1 , tenum_port_base_t port_typesec2 )
{
	tenum_errors_type ret_val = NO_ERRORS;
	if( (port_typemin < PORT_MAX && port_typemin > PORT_MIN ) && (port_typesec1 < PORT_MAX && port_typesec1 >PORT_MIN ) && (port_typesec2 < PORT_MAX && port_typesec2 >PORT_MIN ) )
  da:	98 2f       	mov	r25, r24
  dc:	9a 52       	subi	r25, 0x2A	; 42
  de:	90 31       	cpi	r25, 0x10	; 16
  e0:	08 f5       	brcc	.+66     	; 0x124 <init_ports+0x4a>
  e2:	96 2f       	mov	r25, r22
  e4:	9a 52       	subi	r25, 0x2A	; 42
  e6:	90 31       	cpi	r25, 0x10	; 16
  e8:	f8 f4       	brcc	.+62     	; 0x128 <init_ports+0x4e>
  ea:	94 2f       	mov	r25, r20
  ec:	9a 52       	subi	r25, 0x2A	; 42
  ee:	90 31       	cpi	r25, 0x10	; 16
  f0:	e8 f4       	brcc	.+58     	; 0x12c <init_ports+0x52>
	{
		if( limit == 0 )
  f2:	90 91 78 00 	lds	r25, 0x0078
  f6:	91 11       	cpse	r25, r1
  f8:	1b c0       	rjmp	.+54     	; 0x130 <init_ports+0x56>
		{
			 
			*((volatile uint_8 *) port_typemin  + 1) = 0XFF ;
  fa:	e8 2f       	mov	r30, r24
  fc:	f0 e0       	ldi	r31, 0x00	; 0
  fe:	9f ef       	ldi	r25, 0xFF	; 255
 100:	91 83       	std	Z+1, r25	; 0x01
			*((volatile uint_8 *) port_typesec1 + 1) = 0XFF ;
 102:	e6 2f       	mov	r30, r22
 104:	f0 e0       	ldi	r31, 0x00	; 0
 106:	91 83       	std	Z+1, r25	; 0x01
			*((volatile uint_8 *) port_typesec2 + 1) = 0XFF ;
 108:	e4 2f       	mov	r30, r20
 10a:	f0 e0       	ldi	r31, 0x00	; 0
 10c:	91 83       	std	Z+1, r25	; 0x01
			ga_port_base_buffer[0].port_Base_sec2 = port_typesec2 ;
 10e:	40 93 7b 00 	sts	0x007B, r20
			ga_port_base_buffer[0].port_Base_sec1 = port_typesec1 ;
 112:	60 93 7a 00 	sts	0x007A, r22
			ga_port_base_buffer[0].port_Base_min  = port_typemin ;
 116:	80 93 79 00 	sts	0x0079, r24
			limit = 1 ;
 11a:	81 e0       	ldi	r24, 0x01	; 1
 11c:	80 93 78 00 	sts	0x0078, r24
}tstr_part_base;

static tstr_part_base ga_port_base_buffer[0] ;  
tenum_errors_type init_ports  ( tenum_port_base_t port_typemin , tenum_port_base_t port_typesec1 , tenum_port_base_t port_typesec2 )
{
	tenum_errors_type ret_val = NO_ERRORS;
 120:	82 e0       	ldi	r24, 0x02	; 2
 122:	08 95       	ret
		}

	}
	else
	{
		ret_val = INVALID_PARAMTER;
 124:	83 e0       	ldi	r24, 0x03	; 3
 126:	08 95       	ret
 128:	83 e0       	ldi	r24, 0x03	; 3
 12a:	08 95       	ret
 12c:	83 e0       	ldi	r24, 0x03	; 3
 12e:	08 95       	ret
			ga_port_base_buffer[0].port_Base_min  = port_typemin ;
			limit = 1 ;
		}
		else
		{
			ret_val = JUST_THREE_PORTS;
 130:	84 e0       	ldi	r24, 0x04	; 4
	}



	return ret_val ;
}
 132:	08 95       	ret

00000134 <start_clock>:
tenum_errors_type start_clock ()
{
 134:	cf 93       	push	r28
 136:	df 93       	push	r29
	tenum_errors_type ret_val = NO_ERRORS;
     if(limit == 1 )
 138:	80 91 78 00 	lds	r24, 0x0078
 13c:	81 30       	cpi	r24, 0x01	; 1
 13e:	09 f0       	breq	.+2      	; 0x142 <start_clock+0xe>
 140:	8b c0       	rjmp	.+278    	; 0x258 <start_clock+0x124>
	 {
	
		 //TCCR1A = 0X8D   ;
		 TCCR1B = 0X0D ;
 142:	8d e0       	ldi	r24, 0x0D	; 13
 144:	8e bd       	out	0x2e, r24	; 46
		 OCR1A  = 0X3E8  ;
 146:	88 ee       	ldi	r24, 0xE8	; 232
 148:	93 e0       	ldi	r25, 0x03	; 3
 14a:	9b bd       	out	0x2b, r25	; 43
 14c:	8a bd       	out	0x2a, r24	; 42
		 TIMSK |= (1<<4);
 14e:	89 b7       	in	r24, 0x39	; 57
 150:	80 61       	ori	r24, 0x10	; 16
 152:	89 bf       	out	0x39, r24	; 57
		 //TIMSK |= (1<<2);
		 sei();
 154:	78 94       	sei
		 
		 PORTC = pattarn_seven_seg_num[min] ;
 156:	e0 91 76 00 	lds	r30, 0x0076
 15a:	f0 e0       	ldi	r31, 0x00	; 0
 15c:	ee 0f       	add	r30, r30
 15e:	ff 1f       	adc	r31, r31
 160:	e0 5a       	subi	r30, 0xA0	; 160
 162:	ff 4f       	sbci	r31, 0xFF	; 255
 164:	80 81       	ld	r24, Z
 166:	85 bb       	out	0x15, r24	; 21
		 PORTD = pattarn_seven_seg_num[sec1] ;
 168:	e0 91 75 00 	lds	r30, 0x0075
 16c:	f0 e0       	ldi	r31, 0x00	; 0
 16e:	ee 0f       	add	r30, r30
 170:	ff 1f       	adc	r31, r31
 172:	e0 5a       	subi	r30, 0xA0	; 160
 174:	ff 4f       	sbci	r31, 0xFF	; 255
 176:	80 81       	ld	r24, Z
 178:	82 bb       	out	0x12, r24	; 18
		 PORTB = pattarn_seven_seg_num[clock_counter] ;
 17a:	e0 91 77 00 	lds	r30, 0x0077
 17e:	f0 e0       	ldi	r31, 0x00	; 0
 180:	ee 0f       	add	r30, r30
 182:	ff 1f       	adc	r31, r31
 184:	e0 5a       	subi	r30, 0xA0	; 160
 186:	ff 4f       	sbci	r31, 0xFF	; 255
 188:	80 81       	ld	r24, Z
 18a:	88 bb       	out	0x18, r24	; 24
			  while( flag_if_stop  == 0 )
			  {
			    if( (TIFR &(1<<4)) == 0)
				{
			 
			     *(( volatile uint_8 *)ga_port_base_buffer[0].port_Base_sec2 +2) = pattarn_seven_seg_num[clock_counter] ;
 18c:	cb e7       	ldi	r28, 0x7B	; 123
 18e:	d0 e0       	ldi	r29, 0x00	; 0
					 if (min > 9)
					 {
						 min = 0 ;
					 }
					 sec1 = 0 ;
					 *(( volatile uint_8 *)ga_port_base_buffer[0].port_Base_sec1 +2 ) = pattarn_seven_seg_num[sec1] ;
 190:	8a e7       	ldi	r24, 0x7A	; 122
 192:	90 e0       	ldi	r25, 0x00	; 0
					 clock_counter = 0 ;
					 *(( volatile uint_8 *)ga_port_base_buffer[0].port_Base_min +2 ) = pattarn_seven_seg_num[min] ;
 194:	29 e7       	ldi	r18, 0x79	; 121
 196:	30 e0       	ldi	r19, 0x00	; 0
		 PORTC = pattarn_seven_seg_num[min] ;
		 PORTD = pattarn_seven_seg_num[sec1] ;
		 PORTB = pattarn_seven_seg_num[clock_counter] ;
		 
	
			  while( flag_if_stop  == 0 )
 198:	58 c0       	rjmp	.+176    	; 0x24a <start_clock+0x116>
			  {
			    if( (TIFR &(1<<4)) == 0)
 19a:	08 b6       	in	r0, 0x38	; 56
 19c:	04 fc       	sbrc	r0, 4
 19e:	55 c0       	rjmp	.+170    	; 0x24a <start_clock+0x116>
				{
			 
			     *(( volatile uint_8 *)ga_port_base_buffer[0].port_Base_sec2 +2) = pattarn_seven_seg_num[clock_counter] ;
 1a0:	e8 81       	ld	r30, Y
 1a2:	f0 e0       	ldi	r31, 0x00	; 0
 1a4:	a0 91 77 00 	lds	r26, 0x0077
 1a8:	b0 e0       	ldi	r27, 0x00	; 0
 1aa:	aa 0f       	add	r26, r26
 1ac:	bb 1f       	adc	r27, r27
 1ae:	a0 5a       	subi	r26, 0xA0	; 160
 1b0:	bf 4f       	sbci	r27, 0xFF	; 255
 1b2:	4c 91       	ld	r20, X
 1b4:	42 83       	std	Z+2, r20	; 0x02
				 if ( clock_counter > 9 )
 1b6:	40 91 77 00 	lds	r20, 0x0077
 1ba:	4a 30       	cpi	r20, 0x0A	; 10
 1bc:	98 f0       	brcs	.+38     	; 0x1e4 <start_clock+0xb0>
				 {
					 
					 sec1++;
 1be:	40 91 75 00 	lds	r20, 0x0075
 1c2:	4f 5f       	subi	r20, 0xFF	; 255
 1c4:	40 93 75 00 	sts	0x0075, r20
					 *(( volatile uint_8 *)ga_port_base_buffer[0].port_Base_sec1 +2 ) = pattarn_seven_seg_num[sec1] ;					 
 1c8:	dc 01       	movw	r26, r24
 1ca:	ec 91       	ld	r30, X
 1cc:	f0 e0       	ldi	r31, 0x00	; 0
 1ce:	a0 91 75 00 	lds	r26, 0x0075
 1d2:	b0 e0       	ldi	r27, 0x00	; 0
 1d4:	aa 0f       	add	r26, r26
 1d6:	bb 1f       	adc	r27, r27
 1d8:	a0 5a       	subi	r26, 0xA0	; 160
 1da:	bf 4f       	sbci	r27, 0xFF	; 255
 1dc:	4c 91       	ld	r20, X
 1de:	42 83       	std	Z+2, r20	; 0x02
					 clock_counter = 0 ;
 1e0:	10 92 77 00 	sts	0x0077, r1
				 }
				 if ( sec1 == 6 && clock_counter > 0)
 1e4:	40 91 75 00 	lds	r20, 0x0075
 1e8:	46 30       	cpi	r20, 0x06	; 6
 1ea:	59 f5       	brne	.+86     	; 0x242 <start_clock+0x10e>
 1ec:	40 91 77 00 	lds	r20, 0x0077
 1f0:	44 23       	and	r20, r20
 1f2:	39 f1       	breq	.+78     	; 0x242 <start_clock+0x10e>
				 {
					 min++ ;
 1f4:	40 91 76 00 	lds	r20, 0x0076
 1f8:	4f 5f       	subi	r20, 0xFF	; 255
 1fa:	40 93 76 00 	sts	0x0076, r20
					 if (min > 9)
 1fe:	40 91 76 00 	lds	r20, 0x0076
 202:	4a 30       	cpi	r20, 0x0A	; 10
 204:	10 f0       	brcs	.+4      	; 0x20a <start_clock+0xd6>
					 {
						 min = 0 ;
 206:	10 92 76 00 	sts	0x0076, r1
					 }
					 sec1 = 0 ;
 20a:	10 92 75 00 	sts	0x0075, r1
					 *(( volatile uint_8 *)ga_port_base_buffer[0].port_Base_sec1 +2 ) = pattarn_seven_seg_num[sec1] ;
 20e:	dc 01       	movw	r26, r24
 210:	ec 91       	ld	r30, X
 212:	f0 e0       	ldi	r31, 0x00	; 0
 214:	a0 91 75 00 	lds	r26, 0x0075
 218:	b0 e0       	ldi	r27, 0x00	; 0
 21a:	aa 0f       	add	r26, r26
 21c:	bb 1f       	adc	r27, r27
 21e:	a0 5a       	subi	r26, 0xA0	; 160
 220:	bf 4f       	sbci	r27, 0xFF	; 255
 222:	4c 91       	ld	r20, X
 224:	42 83       	std	Z+2, r20	; 0x02
					 clock_counter = 0 ;
 226:	10 92 77 00 	sts	0x0077, r1
					 *(( volatile uint_8 *)ga_port_base_buffer[0].port_Base_min +2 ) = pattarn_seven_seg_num[min] ;
 22a:	d9 01       	movw	r26, r18
 22c:	ec 91       	ld	r30, X
 22e:	f0 e0       	ldi	r31, 0x00	; 0
 230:	a0 91 76 00 	lds	r26, 0x0076
 234:	b0 e0       	ldi	r27, 0x00	; 0
 236:	aa 0f       	add	r26, r26
 238:	bb 1f       	adc	r27, r27
 23a:	a0 5a       	subi	r26, 0xA0	; 160
 23c:	bf 4f       	sbci	r27, 0xFF	; 255
 23e:	4c 91       	ld	r20, X
 240:	42 83       	std	Z+2, r20	; 0x02
				 }
				 if ( flag_if_stop == 1)
 242:	40 91 74 00 	lds	r20, 0x0074
 246:	41 30       	cpi	r20, 0x01	; 1
 248:	49 f0       	breq	.+18     	; 0x25c <start_clock+0x128>
		 PORTC = pattarn_seven_seg_num[min] ;
		 PORTD = pattarn_seven_seg_num[sec1] ;
		 PORTB = pattarn_seven_seg_num[clock_counter] ;
		 
	
			  while( flag_if_stop  == 0 )
 24a:	40 91 74 00 	lds	r20, 0x0074
 24e:	44 23       	and	r20, r20
 250:	09 f4       	brne	.+2      	; 0x254 <start_clock+0x120>
 252:	a3 cf       	rjmp	.-186    	; 0x19a <start_clock+0x66>

	return ret_val ;
}
tenum_errors_type start_clock ()
{
	tenum_errors_type ret_val = NO_ERRORS;
 254:	82 e0       	ldi	r24, 0x02	; 2
 256:	03 c0       	rjmp	.+6      	; 0x25e <start_clock+0x12a>
	   }
	 }
	 
	 else
	 {
		 ret_val = INVALID_PARAMTER;
 258:	83 e0       	ldi	r24, 0x03	; 3
 25a:	01 c0       	rjmp	.+2      	; 0x25e <start_clock+0x12a>

	return ret_val ;
}
tenum_errors_type start_clock ()
{
	tenum_errors_type ret_val = NO_ERRORS;
 25c:	82 e0       	ldi	r24, 0x02	; 2
	 }



	return ret_val ;
}
 25e:	df 91       	pop	r29
 260:	cf 91       	pop	r28
 262:	08 95       	ret

00000264 <stop_clock>:

tenum_errors_type stop_clock  ()
{
	tenum_errors_type ret_val = NO_ERRORS ;
	
	if ( flag_if_stop == 0 )
 264:	80 91 74 00 	lds	r24, 0x0074
 268:	81 11       	cpse	r24, r1
 26a:	21 c0       	rjmp	.+66     	; 0x2ae <stop_clock+0x4a>
    {
	flag_if_stop = 1 ;
 26c:	81 e0       	ldi	r24, 0x01	; 1
 26e:	80 93 74 00 	sts	0x0074, r24
	TIMSK &= ~(1<<4);
 272:	89 b7       	in	r24, 0x39	; 57
 274:	8f 7e       	andi	r24, 0xEF	; 239
 276:	89 bf       	out	0x39, r24	; 57
    PORTB = pattarn_seven_seg_num[clock_counter] ;
 278:	e0 91 77 00 	lds	r30, 0x0077
 27c:	f0 e0       	ldi	r31, 0x00	; 0
 27e:	ee 0f       	add	r30, r30
 280:	ff 1f       	adc	r31, r31
 282:	e0 5a       	subi	r30, 0xA0	; 160
 284:	ff 4f       	sbci	r31, 0xFF	; 255
 286:	80 81       	ld	r24, Z
 288:	88 bb       	out	0x18, r24	; 24
	PORTD = pattarn_seven_seg_num[sec1] ;
 28a:	e0 91 75 00 	lds	r30, 0x0075
 28e:	f0 e0       	ldi	r31, 0x00	; 0
 290:	ee 0f       	add	r30, r30
 292:	ff 1f       	adc	r31, r31
 294:	e0 5a       	subi	r30, 0xA0	; 160
 296:	ff 4f       	sbci	r31, 0xFF	; 255
 298:	80 81       	ld	r24, Z
 29a:	82 bb       	out	0x12, r24	; 18
	PORTC = pattarn_seven_seg_num[min] ;
 29c:	e0 91 76 00 	lds	r30, 0x0076
 2a0:	f0 e0       	ldi	r31, 0x00	; 0
 2a2:	ee 0f       	add	r30, r30
 2a4:	ff 1f       	adc	r31, r31
 2a6:	e0 5a       	subi	r30, 0xA0	; 160
 2a8:	ff 4f       	sbci	r31, 0xFF	; 255
 2aa:	80 81       	ld	r24, Z
 2ac:	85 bb       	out	0x15, r24	; 21
	
	}
	
	
	return ret_val ;
}
 2ae:	82 e0       	ldi	r24, 0x02	; 2
 2b0:	08 95       	ret

000002b2 <_exit>:
 2b2:	f8 94       	cli

000002b4 <__stop_program>:
 2b4:	ff cf       	rjmp	.-2      	; 0x2b4 <__stop_program>
