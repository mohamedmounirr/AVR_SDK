
LCD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000023a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000048  00800060  0000023a  000002ae  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000006cc  00000000  00000000  000002f8  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000097  00000000  00000000  000009c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      0000002f  00000000  00000000  00000a5b  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000070  00000000  00000000  00000a8a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000008ce  00000000  00000000  00000afa  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000378  00000000  00000000  000013c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000432  00000000  00000000  00001740  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000c8  00000000  00000000  00001b74  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000001b5  00000000  00000000  00001c3c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000319  00000000  00000000  00001df1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000068  00000000  00000000  0000210a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea e3       	ldi	r30, 0x3A	; 58
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a8 3a       	cpi	r26, 0xA8	; 168
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 41 00 	call	0x82	; 0x82 <main>
  7a:	0c 94 1b 01 	jmp	0x236	; 0x236 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <main>:
#include <avr/io.h>
#include "LCD.h"
#include <util/delay.h>
int main(void)
{
	init_LCD  ();
  82:	0e 94 b5 00 	call	0x16a	; 0x16a <init_LCD>
	LCD_goto_xy( 1 , 1);
  86:	61 e0       	ldi	r22, 0x01	; 1
  88:	81 e0       	ldi	r24, 0x01	; 1
  8a:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LCD_goto_xy>
	LCD_PRINT  ( " Hallo There ");
  8e:	80 e6       	ldi	r24, 0x60	; 96
  90:	90 e0       	ldi	r25, 0x00	; 0
  92:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <LCD_PRINT>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  96:	2f e3       	ldi	r18, 0x3F	; 63
  98:	8d e0       	ldi	r24, 0x0D	; 13
  9a:	93 e0       	ldi	r25, 0x03	; 3
  9c:	21 50       	subi	r18, 0x01	; 1
  9e:	80 40       	sbci	r24, 0x00	; 0
  a0:	90 40       	sbci	r25, 0x00	; 0
  a2:	e1 f7       	brne	.-8      	; 0x9c <main+0x1a>
  a4:	00 c0       	rjmp	.+0      	; 0xa6 <main+0x24>
  a6:	00 00       	nop
	_delay_ms(1000);
	LCD_goto_xy( 1 , 2);
  a8:	62 e0       	ldi	r22, 0x02	; 2
  aa:	81 e0       	ldi	r24, 0x01	; 1
  ac:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LCD_goto_xy>
	LCD_PRINT  ( "Mohamed with you :)");
  b0:	8e e6       	ldi	r24, 0x6E	; 110
  b2:	90 e0       	ldi	r25, 0x00	; 0
  b4:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <LCD_PRINT>
  b8:	2f e3       	ldi	r18, 0x3F	; 63
  ba:	8d e0       	ldi	r24, 0x0D	; 13
  bc:	93 e0       	ldi	r25, 0x03	; 3
  be:	21 50       	subi	r18, 0x01	; 1
  c0:	80 40       	sbci	r24, 0x00	; 0
  c2:	90 40       	sbci	r25, 0x00	; 0
  c4:	e1 f7       	brne	.-8      	; 0xbe <main+0x3c>
  c6:	00 c0       	rjmp	.+0      	; 0xc8 <main+0x46>
  c8:	00 00       	nop
	_delay_ms(1000);
	LCD_goto_xy( 1 , 3);
  ca:	63 e0       	ldi	r22, 0x03	; 3
  cc:	81 e0       	ldi	r24, 0x01	; 1
  ce:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LCD_goto_xy>
	LCD_PRINT  ( " How it's going ");
  d2:	82 e8       	ldi	r24, 0x82	; 130
  d4:	90 e0       	ldi	r25, 0x00	; 0
  d6:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <LCD_PRINT>
  da:	2f e3       	ldi	r18, 0x3F	; 63
  dc:	8d e0       	ldi	r24, 0x0D	; 13
  de:	93 e0       	ldi	r25, 0x03	; 3
  e0:	21 50       	subi	r18, 0x01	; 1
  e2:	80 40       	sbci	r24, 0x00	; 0
  e4:	90 40       	sbci	r25, 0x00	; 0
  e6:	e1 f7       	brne	.-8      	; 0xe0 <main+0x5e>
  e8:	00 c0       	rjmp	.+0      	; 0xea <main+0x68>
  ea:	00 00       	nop
	_delay_ms(1000);
	LCD_goto_xy( 1 , 4);
  ec:	64 e0       	ldi	r22, 0x04	; 4
  ee:	81 e0       	ldi	r24, 0x01	; 1
  f0:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LCD_goto_xy>
	LCD_PRINT  ( "I hope that you'r ok");
  f4:	83 e9       	ldi	r24, 0x93	; 147
  f6:	90 e0       	ldi	r25, 0x00	; 0
  f8:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <LCD_PRINT>
  fc:	2f e3       	ldi	r18, 0x3F	; 63
  fe:	8d e0       	ldi	r24, 0x0D	; 13
 100:	93 e0       	ldi	r25, 0x03	; 3
 102:	21 50       	subi	r18, 0x01	; 1
 104:	80 40       	sbci	r24, 0x00	; 0
 106:	90 40       	sbci	r25, 0x00	; 0
 108:	e1 f7       	brne	.-8      	; 0x102 <main+0x80>
 10a:	00 c0       	rjmp	.+0      	; 0x10c <main+0x8a>
 10c:	00 00       	nop
	_delay_ms(1000);
	LCD_CLEAR();
 10e:	0e 94 14 01 	call	0x228	; 0x228 <LCD_CLEAR>
 112:	2f e7       	ldi	r18, 0x7F	; 127
 114:	8a e1       	ldi	r24, 0x1A	; 26
 116:	96 e0       	ldi	r25, 0x06	; 6
 118:	21 50       	subi	r18, 0x01	; 1
 11a:	80 40       	sbci	r24, 0x00	; 0
 11c:	90 40       	sbci	r25, 0x00	; 0
 11e:	e1 f7       	brne	.-8      	; 0x118 <main+0x96>
 120:	00 c0       	rjmp	.+0      	; 0x122 <main+0xa0>
 122:	00 00       	nop
	_delay_ms(2000);
	deinit_LCD  ();
 124:	0e 94 18 01 	call	0x230	; 0x230 <deinit_LCD>
 128:	ff cf       	rjmp	.-2      	; 0x128 <main+0xa6>

0000012a <lcdcommand>:


tenum_TF lcdcommand( uint_8 cmmd)
{
	tenum_TF ret_val = TRUE ;
	 if( cmmd != 0)
 12a:	88 23       	and	r24, r24
 12c:	61 f0       	breq	.+24     	; 0x146 <lcdcommand+0x1c>
	 {
		 LCD_DPORT = cmmd ;
 12e:	8b bb       	out	0x1b, r24	; 27
		 LCD_CPORT &= ~(1<< LCD_RS);
 130:	c0 98       	cbi	0x18, 0	; 24
		 LCD_CPORT &= ~(1<< LCD_RW);
 132:	c1 98       	cbi	0x18, 1	; 24
		 LCD_CPORT |=  (1<< LCD_EN);
 134:	c2 9a       	sbi	0x18, 2	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 136:	00 00       	nop
		 _delay_us(1);
		 LCD_CPORT &= ~(1<< LCD_EN);
 138:	c2 98       	cbi	0x18, 2	; 24
 13a:	81 e2       	ldi	r24, 0x21	; 33
 13c:	8a 95       	dec	r24
 13e:	f1 f7       	brne	.-4      	; 0x13c <lcdcommand+0x12>
 140:	00 00       	nop
#define LCD_EN 2


tenum_TF lcdcommand( uint_8 cmmd)
{
	tenum_TF ret_val = TRUE ;
 142:	80 e0       	ldi	r24, 0x00	; 0
 144:	08 95       	ret
		 LCD_CPORT &= ~(1<< LCD_EN);
		 _delay_us(100);
	 }
	 else
	 {
		 ret_val = FALSE ;
 146:	81 e0       	ldi	r24, 0x01	; 1

	 }
	
	return ret_val ;
}
 148:	08 95       	ret

0000014a <lcddata>:
tenum_TF lcddata   ( uint_8 data)
{
	tenum_TF ret_val = TRUE ;
	if( data != 0)
 14a:	88 23       	and	r24, r24
 14c:	61 f0       	breq	.+24     	; 0x166 <lcddata+0x1c>
	{
		LCD_DPORT = data ;
 14e:	8b bb       	out	0x1b, r24	; 27
		LCD_CPORT |=  ( 1<<LCD_RS );
 150:	c0 9a       	sbi	0x18, 0	; 24
		LCD_CPORT &= ~( 1<<LCD_RW );
 152:	c1 98       	cbi	0x18, 1	; 24
		LCD_CPORT |=  ( 1<<LCD_EN );
 154:	c2 9a       	sbi	0x18, 2	; 24
 156:	00 00       	nop
		_delay_us(1);
		LCD_CPORT &= ~(1<< LCD_EN);
 158:	c2 98       	cbi	0x18, 2	; 24
 15a:	81 e2       	ldi	r24, 0x21	; 33
 15c:	8a 95       	dec	r24
 15e:	f1 f7       	brne	.-4      	; 0x15c <lcddata+0x12>
 160:	00 00       	nop
	
	return ret_val ;
}
tenum_TF lcddata   ( uint_8 data)
{
	tenum_TF ret_val = TRUE ;
 162:	80 e0       	ldi	r24, 0x00	; 0
 164:	08 95       	ret
		_delay_us(100);
		
	}
	else
	{
		ret_val = FALSE ;
 166:	81 e0       	ldi	r24, 0x01	; 1

	}
	
	return ret_val ;
	
}
 168:	08 95       	ret

0000016a <init_LCD>:
void init_LCD  ()
{
	LCD_DDDRA = 0xFF ; 
 16a:	8f ef       	ldi	r24, 0xFF	; 255
 16c:	8a bb       	out	0x1a, r24	; 26
	LCD_CDDRB = 0xFF ;
 16e:	87 bb       	out	0x17, r24	; 23
	LCD_CPORT &= ~(1<< LCD_EN);
 170:	c2 98       	cbi	0x18, 2	; 24
 172:	83 ef       	ldi	r24, 0xF3	; 243
 174:	91 e0       	ldi	r25, 0x01	; 1
 176:	01 97       	sbiw	r24, 0x01	; 1
 178:	f1 f7       	brne	.-4      	; 0x176 <init_LCD+0xc>
 17a:	00 c0       	rjmp	.+0      	; 0x17c <init_LCD+0x12>
 17c:	00 00       	nop
	_delay_us(2000);
	lcdcommand(0x38);
 17e:	88 e3       	ldi	r24, 0x38	; 56
 180:	0e 94 95 00 	call	0x12a	; 0x12a <lcdcommand>
	lcdcommand(0x0E);
 184:	8e e0       	ldi	r24, 0x0E	; 14
 186:	0e 94 95 00 	call	0x12a	; 0x12a <lcdcommand>
	lcdcommand(0x01);
 18a:	81 e0       	ldi	r24, 0x01	; 1
 18c:	0e 94 95 00 	call	0x12a	; 0x12a <lcdcommand>
 190:	83 ef       	ldi	r24, 0xF3	; 243
 192:	91 e0       	ldi	r25, 0x01	; 1
 194:	01 97       	sbiw	r24, 0x01	; 1
 196:	f1 f7       	brne	.-4      	; 0x194 <init_LCD+0x2a>
 198:	00 c0       	rjmp	.+0      	; 0x19a <init_LCD+0x30>
 19a:	00 00       	nop
	_delay_us(2000);
	lcdcommand(0x06);
 19c:	86 e0       	ldi	r24, 0x06	; 6
 19e:	0e 94 95 00 	call	0x12a	; 0x12a <lcdcommand>
 1a2:	08 95       	ret

000001a4 <LCD_goto_xy>:
	
}
void LCD_goto_xy( uint_8 x , uint_8 y)
{
 1a4:	cf 93       	push	r28
 1a6:	df 93       	push	r29
 1a8:	00 d0       	rcall	.+0      	; 0x1aa <LCD_goto_xy+0x6>
 1aa:	00 d0       	rcall	.+0      	; 0x1ac <LCD_goto_xy+0x8>
 1ac:	cd b7       	in	r28, 0x3d	; 61
 1ae:	de b7       	in	r29, 0x3e	; 62
	uint_8 firstcharadd[] = { 0x80 , 0xC0 , 0x94 , 0xD4 };
 1b0:	90 e8       	ldi	r25, 0x80	; 128
 1b2:	99 83       	std	Y+1, r25	; 0x01
 1b4:	90 ec       	ldi	r25, 0xC0	; 192
 1b6:	9a 83       	std	Y+2, r25	; 0x02
 1b8:	94 e9       	ldi	r25, 0x94	; 148
 1ba:	9b 83       	std	Y+3, r25	; 0x03
 1bc:	94 ed       	ldi	r25, 0xD4	; 212
 1be:	9c 83       	std	Y+4, r25	; 0x04
    lcdcommand( firstcharadd[y-1] + x - 1 ) ;
 1c0:	81 50       	subi	r24, 0x01	; 1
 1c2:	fe 01       	movw	r30, r28
 1c4:	e6 0f       	add	r30, r22
 1c6:	f1 1d       	adc	r31, r1
 1c8:	90 81       	ld	r25, Z
 1ca:	89 0f       	add	r24, r25
 1cc:	0e 94 95 00 	call	0x12a	; 0x12a <lcdcommand>
 1d0:	81 e2       	ldi	r24, 0x21	; 33
 1d2:	8a 95       	dec	r24
 1d4:	f1 f7       	brne	.-4      	; 0x1d2 <LCD_goto_xy+0x2e>
 1d6:	00 00       	nop
	_delay_us(100);
	
}
 1d8:	0f 90       	pop	r0
 1da:	0f 90       	pop	r0
 1dc:	0f 90       	pop	r0
 1de:	0f 90       	pop	r0
 1e0:	df 91       	pop	r29
 1e2:	cf 91       	pop	r28
 1e4:	08 95       	ret

000001e6 <LCD_PRINT>:
tenum_TF LCD_PRINT  ( uint_8 * str_DIS_data)
{
 1e6:	1f 93       	push	r17
 1e8:	cf 93       	push	r28
 1ea:	df 93       	push	r29
 1ec:	ec 01       	movw	r28, r24
	tenum_TF ret_val = TRUE ;
	if ( str_DIS_data != NULL)
 1ee:	00 97       	sbiw	r24, 0x00	; 0
 1f0:	a1 f0       	breq	.+40     	; 0x21a <LCD_PRINT+0x34>
	{
		uint_8 i = 0 ; 
		while ( str_DIS_data[i] != 0)
 1f2:	88 81       	ld	r24, Y
 1f4:	88 23       	and	r24, r24
 1f6:	99 f0       	breq	.+38     	; 0x21e <LCD_PRINT+0x38>
 1f8:	10 e0       	ldi	r17, 0x00	; 0
		{
			lcddata(str_DIS_data[i]);
 1fa:	0e 94 a5 00 	call	0x14a	; 0x14a <lcddata>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1fe:	83 ed       	ldi	r24, 0xD3	; 211
 200:	90 e3       	ldi	r25, 0x30	; 48
 202:	01 97       	sbiw	r24, 0x01	; 1
 204:	f1 f7       	brne	.-4      	; 0x202 <LCD_PRINT+0x1c>
 206:	00 c0       	rjmp	.+0      	; 0x208 <LCD_PRINT+0x22>
 208:	00 00       	nop
			_delay_ms(50);
			i++ ;
 20a:	1f 5f       	subi	r17, 0xFF	; 255
{
	tenum_TF ret_val = TRUE ;
	if ( str_DIS_data != NULL)
	{
		uint_8 i = 0 ; 
		while ( str_DIS_data[i] != 0)
 20c:	fe 01       	movw	r30, r28
 20e:	e1 0f       	add	r30, r17
 210:	f1 1d       	adc	r31, r1
 212:	80 81       	ld	r24, Z
 214:	81 11       	cpse	r24, r1
 216:	f1 cf       	rjmp	.-30     	; 0x1fa <LCD_PRINT+0x14>
 218:	03 c0       	rjmp	.+6      	; 0x220 <LCD_PRINT+0x3a>
	
		}
	}
	else
	{
		ret_val = FALSE ;
 21a:	81 e0       	ldi	r24, 0x01	; 1
 21c:	01 c0       	rjmp	.+2      	; 0x220 <LCD_PRINT+0x3a>
	_delay_us(100);
	
}
tenum_TF LCD_PRINT  ( uint_8 * str_DIS_data)
{
	tenum_TF ret_val = TRUE ;
 21e:	80 e0       	ldi	r24, 0x00	; 0
	else
	{
		ret_val = FALSE ;
	}
	return ret_val ;
}
 220:	df 91       	pop	r29
 222:	cf 91       	pop	r28
 224:	1f 91       	pop	r17
 226:	08 95       	ret

00000228 <LCD_CLEAR>:
void LCD_CLEAR  ()
{
	lcdcommand( 0x01);
 228:	81 e0       	ldi	r24, 0x01	; 1
 22a:	0e 94 95 00 	call	0x12a	; 0x12a <lcdcommand>
 22e:	08 95       	ret

00000230 <deinit_LCD>:
	
}
void deinit_LCD  ()
{
	LCD_DDDRA = 0x00 ;
 230:	1a ba       	out	0x1a, r1	; 26
	LCD_CDDRB = 0x00 ;
 232:	17 ba       	out	0x17, r1	; 23
 234:	08 95       	ret

00000236 <_exit>:
 236:	f8 94       	cli

00000238 <__stop_program>:
 238:	ff cf       	rjmp	.-2      	; 0x238 <__stop_program>
